pipeline {
    agent any

    tools {
        // Define the tools required for the pipeline
        jdk 'jdk-17' // Use the JDK installation configured in Jenkins
        maven 'Maven 3.9.6' // Use the Maven installation configured in Jenkins
    }

    environment {
        // Define environment variables
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server configured in Jenkins
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository' // Maven options
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the Git repository
                git 'https://github.com/subhashis2018/springboot_cicd_1.git'
            }
        }

        stage('Maven Clean') {
            steps {
                // Run Maven clean
                sh 'mvn clean'
            }
        }

        stage('Maven Build') {
            steps {
                // Run Maven build
                sh 'mvn compile'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                // SonarQube scanner home directory
                scannerHome = tool 'SonarQube Scanner'
            }
            steps {
                // Run SonarQube analysis
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('JaCoCo Code Coverage') {
            steps {
                // Run Maven test and generate JaCoCo reports
                sh 'mvn test jacoco:report'
            }
        }

        stage('PMD Analysis') {
            steps {
                // Run PMD analysis
                sh 'mvn pmd:pmd'
            }
        }

        stage('Archive Reports') {
            steps {
                // Archive the JaCoCo and PMD reports
                archiveArtifacts artifacts: 'target/site/jacoco/*, target/site/pmd/*', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            // Publish JaCoCo coverage report
            jacoco(execPattern: 'target/jacoco.exec', classPattern: 'target/classes', sourcePattern: 'src/main/java', exclusionPattern: '')
        }
        failure {
            // Notify of build failure
            mail to: 'subhashis.sarangi41@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.JOB_NAME} build ${env.BUILD_NUMBER}. Please check the logs."
        }
    }
}
